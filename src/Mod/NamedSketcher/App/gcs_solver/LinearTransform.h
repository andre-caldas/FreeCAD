// SPDX-License-Identifier: LGPL-2.1-or-later
/****************************************************************************
 *                                                                          *
 *   Copyright (c) 2023 Andr√© Caldas <andre.em.caldas@gmail.com>            *
 *                                                                          *
 *   This file is part of FreeCAD.                                          *
 *                                                                          *
 *   FreeCAD is free software: you can redistribute it and/or modify it     *
 *   under the terms of the GNU Lesser General Public License as            *
 *   published by the Free Software Foundation, either version 2.1 of the   *
 *   License, or (at your option) any later version.                        *
 *                                                                          *
 *   FreeCAD is distributed in the hope that it will be useful, but         *
 *   WITHOUT ANY WARRANTY; without even the implied warranty of             *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU       *
 *   Lesser General Public License for more details.                        *
 *                                                                          *
 *   You should have received a copy of the GNU Lesser General Public       *
 *   License along with FreeCAD. If not, see                                *
 *   <https://www.gnu.org/licenses/>.                                       *
 *                                                                          *
 ***************************************************************************/


#ifndef NAMEDSKETCHER_GCS_LinearTransform_H
#define NAMEDSKETCHER_GCS_LinearTransform_H

#include <unordered_map>
#include <vector>

namespace NamedSketcher::GCS
{

template<typename T>
class Vector;

template<typename OutType, typename InType>
class LinearTransform
{
public:
    using dual_t = Vector<InType>;
    std::vector<OutType> dualKeys;

    LinearTransform() = default;
    LinearTransform(LinearTransform<OutType,InType>&& from);

    void addDual(OutType key, dual_t&& dual);
    void removeDual(OutType key);
    void clear() {dualKeys.clear();duals.clear();}

    dual_t& operator[](OutType functional) {return duals.at(functional);}
    const dual_t& operator[](OutType functional) const {return duals.at(functional);}
    dual_t& operator[](int index) {return duals.at(dualKeys.at(index));}
    const dual_t& operator[](int index) const {return duals.at(dualKeys.at(index));}
    const OutType& getKey(int index) {return dualKeys.at(index);}

    int size() const {return dualKeys.size();}
    Vector<OutType> apply(const dual_t& vector) const;

    /**
     * @brief Gets the orthogonal projection of @a duals into the space
     * generated by duals.
     * @param dual to project.
     * @attention Assumes that duals are orthonormalized.
     * @return
     */
    dual_t project(const dual_t& dual) const;

    void replaceInputParameter(InType from, InType to);

private:
    std::unordered_map<OutType, dual_t> duals;
};

} // namespace NamedSketcher::GCS

#include "LinearTransform.inc"

#endif // NAMEDSKETCHER_GCS_LinearTransform_H
